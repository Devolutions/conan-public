name: conan packages
on: 
  workflow_dispatch:
  schedule:
    - cron: '25 6 * * 4' # 6:25am UTC every Thursday

env:
   conan-version: 1.43.4
  
jobs:
  build:
    name: conan packages [${{ matrix.arch }}-${{ matrix.os }}-${{ matrix.build_type }}]
    runs-on: ${{matrix.runner}}
    concurrency: 
      group: conan-${{ github.ref }}-${{matrix.os}}-${{matrix.arch}}-${{ matrix.build_type }}
      cancel-in-progress: true
    strategy:
      fail-fast: false
      matrix:
        arch: [ x86, x86_64, arm, aarch64 ]
        os: [ windows, macos, linux, ios, android ]
        build_type: [ Debug, Release, RelWithDebInfo ]
        
        exclude:
          - arch: x86
            os: macos
          - arch: x86
            os: linux
          - arch: x86
            os: ios
          - arch: arm
            os: windows
          - arch: arm
            os: macos
          - arch: arm
            os: linux
          - build_type: RelWithDebInfo
            os: windows
          - build_type: RelWithDebInfo
            os: linux
          - build_type: RelWithDebInfo
            os: ios

        include:
          - os: windows
            runner: windows-2019
          - os: macos
            runner: macos-latest
          - os: linux
            runner: ubuntu-20.04
          - os: ios
            runner: macos-latest
          - os: android
            runner: ubuntu-20.04

    steps:
      - name: Check out ${{ github.repository }}
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        if: runner.os == 'Linux'

      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v1
        if: runner.os == 'Linux'

      - name: Configure Windows runner
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          choco install --no-progress ninja
          choco install --no-progress cmake
          choco install --no-progress 7zip
          choco install --no-progress python
          choco install --no-progress vswhere
          choco install --no-progress nasm
          echo "${Env:ProgramFiles}\NASM" | Out-File -FilePath $Env:GITHUB_PATH -Encoding UTF8 -Append
          Invoke-WebRequest -Uri 'https://www.tortall.net/projects/yasm/releases/yasm-1.2.0-win64.exe' -OutFile 'yasm.exe'
          Move-Item .\yasm.exe "${Env:ProgramFiles}\NASM\yasm.exe"
          pip install conan==${{ env.conan-version }} invoke Jinja2 urllib3 chardet requests --upgrade
          echo $PSVersionTable
          echo "CONAN_USER_HOME=C:/tmp" >> $Env:GITHUB_ENV

      - name: Configure macOS runner
        if: runner.os == 'macOS'
        env:
          CMAKE_OSX_DEPLOYMENT_TARGET: "10.12"
        run: |
          brew install ninja
          brew install cmake
          brew install python
          brew install nasm yasm
          pip3 install conan==${{ env.conan-version }} invoke Jinja2 urllib3 chardet requests --upgrade
          sudo rm -rf /Library/Developer/CommandLineTools
          echo "CONAN_USER_HOME=/tmp" >> $GITHUB_ENV

      - name: Configure Linux runner
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install ninja-build
          sudo apt install cmake
          sudo apt install xz-utils
          sudo apt install nasm yasm
          sudo apt install python3 python3-pip python3-wget python3-setuptools
          pip3 install conan==${{ env.conan-version }} invoke Jinja2 urllib3 chardet requests --upgrade
          echo "CONAN_USER_HOME=/tmp" >> $GITHUB_ENV

      - name: Install clang+llvm
        if: runner.os == 'Linux'
        run: |
          CLANG_LLVM_OS="ubuntu-$(lsb_release -rs)"
          CLANG_LLVM_BASE_URL="https://github.com/awakecoding/llvm-prebuilt/releases/download/v2021.2.4"
          CLANG_LLVM_NAME="clang+llvm-12.0.1-x86_64-${CLANG_LLVM_OS}"
          wget -q "${CLANG_LLVM_BASE_URL}/${CLANG_LLVM_NAME}.tar.xz"
          tar -xf "${CLANG_LLVM_NAME}.tar.xz" -C /tmp
          sudo mv "/tmp/${CLANG_LLVM_NAME}" /opt/llvm
          echo "PATH=$PATH:/opt/llvm/bin" >> $GITHUB_ENV

      - name: Install Android NDK
        if: matrix.os == 'android'
        run: |
          wget -q https://dl.google.com/android/repository/android-ndk-r21e-linux-x86_64.zip
          unzip -q android-ndk-r21e-linux-x86_64.zip -d /tmp
          sudo mv /tmp/android-ndk-r21e /opt/android-ndk
          echo "ANDROID_NDK=/opt/android-ndk" >> $GITHUB_ENV

      - name: Configure conan environment
        shell: pwsh
        run: |
          conan config init
          conan config install ./settings
          conan remote disable conancenter
          $ConanManifestTime = $(git log -1 --pretty=format:%ct)
          echo "CONAN_MANIFEST_TIME=$ConanManifestTime" >> $Env:GITHUB_ENV

      - name: Build conan packages
        run: |
          pwsh build.ps1 -Platform ${{ matrix.os }} -Architecture ${{ matrix.arch }} -BuildType ${{ matrix.build_type }}

      - name: Package conan cache
        id: package-conan-cache
        shell: pwsh
        run: |
          $PACKAGE_NAME="conan-${{ matrix.arch }}-${{ matrix.os }}-${{ matrix.build_type }}"
          conan remove --locks
          $CONAN_DATA = Join-Path $Env:CONAN_USER_HOME ".conan" "data"
          $RemoveList = Get-ChildItem "${CONAN_DATA}" -Include @("build","source") -Directory -Depth 4 -Recurse -Name
          $RemoveList | ForEach-Object { Remove-Item -Path "$CONAN_DATA/$_" -Recurse -Force }
          $ConanManifests = Get-ChildItem $CONAN_DATA -Recurse -Include "conanmanifest.txt"
          $ConanManifestTime = $Env:CONAN_MANIFEST_TIME
          foreach ($ManifestFile in $ConanManifests) {
            $Manifest = Get-Content $ManifestFile
            $Manifest[0] = $ConanManifestTime
            $Manifest | Out-File $ManifestFile
          }
          tar -czf "${PACKAGE_NAME}.tar.gz" -C "$Env:CONAN_USER_HOME" ".conan"
          echo "::set-output name=package_name::$PACKAGE_NAME"

      - name: Upload conan cache
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.package-conan-cache.outputs.package_name }}
          path: ${{ steps.package-conan-cache.outputs.package_name }}.tar.gz

  publish:
    concurrency: conan-publish
    runs-on: ubuntu-latest
    environment: artifactory-publish
    needs: build
    if: github.event_name != 'schedule'
    
    steps:
      - name: Check out ${{ github.repository }}
        uses: actions/checkout@v2
      - name: Configure runner
        run: |
          sudo apt update
          sudo apt install python3 python3-pip python3-wget python3-setuptools
          pip3 install conan==${{ env.conan-version }} invoke Jinja2 urllib3 chardet requests --upgrade
          echo "CONAN_USER_HOME=/tmp" >> $GITHUB_ENV

      - name: Configure conan environment
        run: |
          conan config init
          conan config install ./settings

      - name: Download conan data
        uses: actions/download-artifact@v2
        with:
          path: download

      - name: Publish packages
        run: pwsh ../publish.ps1
        working-directory: download
        env:
          CONAN_REMOTE_NAME: "artifactory"
          CONAN_REMOTE_URL: "https://devolutions.jfrog.io/devolutions/api/conan/conan-local"
          CONAN_LOGIN_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          CONAN_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
