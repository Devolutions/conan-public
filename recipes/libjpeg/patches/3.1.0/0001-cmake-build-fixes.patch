From a1af75d301ab1253995d8ae72251e37273bf7bde Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marc-Andr=C3=A9=20Moreau?= <mamoreau@devolutions.net>
Date: Tue, 11 Mar 2025 16:43:35 -0400
Subject: [PATCH] cmake build fixes

---
 CMakeLists.txt      | 24 ++++++++++++++++++++++++
 simd/CMakeLists.txt | 19 +++++++++++++++++++
 src/jmorecfg.h      |  2 ++
 3 files changed, 45 insertions(+)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 9c4e5e2d..26161d3d 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -92,6 +92,30 @@ message(STATUS "CMAKE_BUILD_TYPE = ${CMAKE_BUILD_TYPE}")
 
 message(STATUS "VERSION = ${VERSION}, BUILD = ${BUILD}")
 
+if(NOT DEFINED CMAKE_SIZEOF_VOID_P)
+  if(DEFINED CMAKE_OSX_ARCHITECTURES)
+    list(GET CMAKE_OSX_ARCHITECTURES 0 CMAKE_SYSTEM_PROCESSOR)
+    if(CMAKE_SYSTEM_PROCESSOR MATCHES ".*64")
+      set(CMAKE_SIZEOF_VOID_P 8)
+    else()
+      set(CMAKE_SIZEOF_VOID_P 4)
+    endif()
+  else()
+    set(CMAKE_SIZEOF_VOID_P 8) # default to 64-bit
+  endif()
+endif()
+
+if(IOS)
+  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -arch ${CMAKE_SYSTEM_PROCESSOR}")
+  if(CMAKE_SYSTEM_PROCESSOR MATCHES "armv7")
+    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mfloat-abi=softfp")
+  elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "armv7s")
+    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mfloat-abi=softfp")
+  elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "arm64")
+    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -funwind-tables")
+  endif()
+endif()
+
 include(cmakescripts/PackageInfo.cmake)
 
 # Detect CPU type and whether we're building 64-bit or 32-bit code
diff --git a/simd/CMakeLists.txt b/simd/CMakeLists.txt
index aecc9a27..3cf3dfa6 100644
--- a/simd/CMakeLists.txt
+++ b/simd/CMakeLists.txt
@@ -29,6 +29,8 @@ endif()
 if(CPU_TYPE STREQUAL "x86_64")
   if(CYGWIN)
     set(CMAKE_ASM_NASM_OBJECT_FORMAT win64)
+  elseif(APPLE)
+    set(CMAKE_ASM_NASM_OBJECT_FORMAT macho64)
   endif()
   if(CMAKE_C_COMPILER_ABI MATCHES "ELF X32")
     set(CMAKE_ASM_NASM_OBJECT_FORMAT elfx32)
@@ -38,6 +40,19 @@ elseif(CPU_TYPE STREQUAL "i386")
     set(CMAKE_ASM_NASM_OBJECT_FORMAT obj)
   elseif(CYGWIN)
     set(CMAKE_ASM_NASM_OBJECT_FORMAT win32)
+  elseif(APPLE)
+    set(CMAKE_ASM_NASM_OBJECT_FORMAT macho32)
+  endif()
+endif()
+
+if(APPLE)
+  # try finding recent nasm on host rather than the one that comes with xcode
+  set(_CMAKE_FIND_ROOT_PATH_MODE_PROGRAM ${CMAKE_FIND_ROOT_PATH_MODE_PROGRAM})
+  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
+  find_program(CMAKE_ASM_NASM_COMPILER nasm)
+  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM ${_CMAKE_FIND_ROOT_PATH_MODE_PROGRAM})
+  if(CMAKE_ASM_NASM_COMPILER MATCHES "NOTFOUND")
+    unset(CMAKE_ASM_NASM_COMPILER)
   endif()
 endif()
 
@@ -328,6 +343,10 @@ if(NOT NEON_INTRINSICS)
 
   set(CMAKE_ASM_FLAGS "${CMAKE_C_FLAGS} ${CMAKE_ASM_FLAGS}")
 
+  if(IOS AND (NOT CMAKE_ASM_FLAGS MATCHES "-arch"))
+    set(CMAKE_ASM_FLAGS "-arch ${CMAKE_SYSTEM_PROCESSOR} ${CMAKE_ASM_FLAGS}")
+  endif()
+
   # Test whether gas-preprocessor.pl would be needed to build the GAS
   # implementation of the Neon SIMD extensions.  If so, then automatically
   # enable the full Neon intrinsics implementation.
diff --git a/src/jmorecfg.h b/src/jmorecfg.h
index 89c7842c..a4e318e5 100644
--- a/src/jmorecfg.h
+++ b/src/jmorecfg.h
@@ -87,6 +87,7 @@ typedef unsigned char JOCTET;
 #define GETJOCTET(value)  (value)
 
 
+#ifndef HAVE_JPEG_INT_TYPES
 /* These typedefs are used for various table entries and so forth.
  * They must be at least as wide as specified; but making them too big
  * won't cost a huge amount of memory, so we don't provide special
@@ -142,6 +143,7 @@ typedef long INT32;
 #endif
 #endif
 #endif
+#endif
 
 /* Datatype used for image dimensions.  The JPEG standard only supports
  * images up to 64K*64K due to 16-bit fields in SOF markers.  Therefore
-- 
2.34.1

