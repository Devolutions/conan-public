From 247086b1cc96b585fb14d404f07fa1cf972b471f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marc-Andre=CC=81=20Moreau?= <marcandre.moreau@gmail.com>
Date: Wed, 1 Feb 2017 11:42:48 -0500
Subject: [PATCH] cmake build fixes

---
 CMakeLists.txt      | 26 ++++++++++++++++++++++++++
 jmorecfg.h          |  4 ++--
 simd/CMakeLists.txt | 19 +++++++++++++++++++
 3 files changed, 47 insertions(+), 2 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 7af45a4..f20ec88 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -28,6 +28,10 @@ set(LIBJPEG_TURBO_VERSION_NUMBER ${VERSION_MAJOR}${VERSION_MINOR}${VERSION_REVIS
 string(TIMESTAMP DEFAULT_BUILD "%Y%m%d")
 set(BUILD ${DEFAULT_BUILD} CACHE STRING "Build string (default: ${DEFAULT_BUILD})")
 
+if(CMAKE_TOOLCHAIN_FILE)
+  message(STATUS "Using toolchain file ${CMAKE_TOOLCHAIN_FILE}")
+endif()
+
 # NOTE: On Windows, this does nothing except when using MinGW or Cygwin.
 # CMAKE_BUILD_TYPE has no meaning in Visual Studio, and it always defaults to
 # Debug when using NMake.
@@ -38,6 +42,28 @@ message(STATUS "CMAKE_BUILD_TYPE = ${CMAKE_BUILD_TYPE}")
 
 message(STATUS "VERSION = ${VERSION}, BUILD = ${BUILD}")
 
+if(NOT DEFINED CMAKE_SIZEOF_VOID_P)
+  if(DEFINED CMAKE_OSX_ARCHITECTURES)
+    list(GET CMAKE_OSX_ARCHITECTURES 0 CMAKE_SYSTEM_PROCESSOR)
+    if(CMAKE_SYSTEM_PROCESSOR MATCHES ".*64")
+      set(CMAKE_SIZEOF_VOID_P 8)
+    else()
+      set(CMAKE_SIZEOF_VOID_P 4)
+    endif()
+  endif()
+endif()
+
+if(IOS)
+  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -arch ${CMAKE_SYSTEM_PROCESSOR}")
+  if(CMAKE_SYSTEM_PROCESSOR MATCHES "armv7")
+    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mfloat-abi=softfp")
+  elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "armv7s")
+    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mfloat-abi=softfp")
+  elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "arm64")
+    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -funwind-tables")
+  endif()
+endif()
+
 # Detect CPU type and whether we're building 64-bit or 32-bit code
 math(EXPR BITS "${CMAKE_SIZEOF_VOID_P} * 8")
 string(TOLOWER ${CMAKE_SYSTEM_PROCESSOR} CMAKE_SYSTEM_PROCESSOR_LC)
diff --git a/jmorecfg.h b/jmorecfg.h
index d0b9300..6b858ea 100644
--- a/jmorecfg.h
+++ b/jmorecfg.h
@@ -113,7 +113,7 @@ typedef char JOCTET;
 
 #endif /* HAVE_UNSIGNED_CHAR */
 
-
+#ifndef HAVE_JPEG_INT_TYPES
 /* These typedefs are used for various table entries and so forth.
  * They must be at least as wide as specified; but making them too big
  * won't cost a huge amount of memory, so we don't provide special
@@ -181,7 +181,7 @@ typedef long INT32;
 #endif
 #endif
 #endif
-
+#endif
 /* Datatype used for image dimensions.  The JPEG standard only supports
  * images up to 64K*64K due to 16-bit fields in SOF markers.  Therefore
  * "unsigned int" is sufficient on all machines.  However, if you need to
diff --git a/simd/CMakeLists.txt b/simd/CMakeLists.txt
index 8dbd7f1..49475bf 100755
--- a/simd/CMakeLists.txt
+++ b/simd/CMakeLists.txt
@@ -29,15 +29,30 @@ endif()
 if(CPU_TYPE STREQUAL "x86_64")
   if(CYGWIN)
     set(CMAKE_ASM_NASM_OBJECT_FORMAT win64)
+  elseif(APPLE)
+    set(CMAKE_ASM_NASM_OBJECT_FORMAT macho64)
   endif()
 elseif(CPU_TYPE STREQUAL "i386")
   if(BORLAND)
     set(CMAKE_ASM_NASM_OBJECT_FORMAT obj)
   elseif(CYGWIN)
     set(CMAKE_ASM_NASM_OBJECT_FORMAT win32)
+  elseif(APPLE)
+    set(CMAKE_ASM_NASM_OBJECT_FORMAT macho32)
   endif()
 endif()
 
+if(APPLE)
+	# try finding recent nasm on host rather than the one that comes with xcode
+	set(_CMAKE_FIND_ROOT_PATH_MODE_PROGRAM ${CMAKE_FIND_ROOT_PATH_MODE_PROGRAM})
+	set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
+	find_program(CMAKE_ASM_NASM_COMPILER nasm)
+	set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM ${_CMAKE_FIND_ROOT_PATH_MODE_PROGRAM})
+	if(CMAKE_ASM_NASM_COMPILER MATCHES "NOTFOUND")
+		unset(CMAKE_ASM_NASM_COMPILER)
+	endif()
+endif()
+
 enable_language(ASM_NASM)
 message(STATUS "CMAKE_ASM_NASM_COMPILER = ${CMAKE_ASM_NASM_COMPILER}")
 
@@ -203,6 +218,10 @@ enable_language(ASM)
 
 set(CMAKE_ASM_FLAGS "${CMAKE_C_FLAGS} ${CMAKE_ASM_FLAGS}")
 
+if(IOS AND (NOT CMAKE_ASM_FLAGS MATCHES "-arch"))
+  set(CMAKE_ASM_FLAGS "-arch ${CMAKE_SYSTEM_PROCESSOR} ${CMAKE_ASM_FLAGS}")
+endif()
+
 string(TOUPPER ${CMAKE_BUILD_TYPE} CMAKE_BUILD_TYPE_UC)
 set(EFFECTIVE_ASM_FLAGS "${CMAKE_ASM_FLAGS} ${CMAKE_ASM_FLAGS_${CMAKE_BUILD_TYPE_UC}}")
 message(STATUS "CMAKE_ASM_FLAGS = ${EFFECTIVE_ASM_FLAGS}")
-- 
2.34.1

